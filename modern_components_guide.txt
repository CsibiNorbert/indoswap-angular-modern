# IndoSwap Angular 17+ - Modern Components (Part 2)

## ðŸŽ¯ **Component 1: Modern Header with Signals**

**File:** `src/app/components/header/header.component.ts`
**Action:** Replace entire content:

```typescript
import { Component, inject, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { WalletService } from '../../services/wallet.service';
import { NotificationService } from '../../services/notification.service';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent {
  private readonly walletService = inject(WalletService);
  private readonly notificationService = inject(NotificationService);

  // Computed signals from services
  readonly isConnected = this.walletService.isConnected;
  readonly isConnecting = this.walletService.isConnecting;
  readonly shortAddress = this.walletService.shortAddress;

  readonly buttonText = computed(() => {
    if (this.isConnecting()) return 'Connecting...';
    if (this.isConnected()) return this.shortAddress();
    return 'Connect Wallet';
  });

  readonly buttonClass = computed(() => ({
    'connect-wallet': true,
    'connected': this.isConnected(),
    'connecting': this.isConnecting()
  }));

  async onWalletToggle(): Promise<void> {
    try {
      if (this.isConnected()) {
        this.walletService.disconnectWallet();
        this.notificationService.showInfo('Wallet disconnected');
      } else {
        await this.walletService.connectWallet();
        this.notificationService.showSuccess('Wallet connected successfully!');
      }
    } catch (error) {
      this.notificationService.showError('Failed to connect wallet');
    }
  }

  onNavClick(section: string): void {
    const element = document.getElementById(section);
    element?.scrollIntoView({ behavior: 'smooth' });
  }
}
```

**File:** `src/app/components/header/header.component.html`
**Action:** Replace entire content:

```html
<header class="header">
  <div class="logo" role="banner">
    <span class="logo-text">IndoSwap</span>
    <span class="logo-badge">DEX</span>
  </div>
  
  <nav class="nav" role="navigation" aria-label="Main navigation">
    <button 
      type="button"
      class="nav-link"
      (click)="onNavClick('swap')"
      aria-label="Go to swap section">
      Swap
    </button>
    <button 
      type="button"
      class="nav-link"
      (click)="onNavClick('pool')"
      aria-label="Go to liquidity pools">
      Pool
    </button>
    <button 
      type="button"
      class="nav-link"
      (click)="onNavClick('farm')"
      aria-label="Go to yield farming">
      Farm
    </button>
    <button 
      type="button"
      class="nav-link"
      (click)="onNavClick('nft')"
      aria-label="Go to NFT marketplace">
      NFT
    </button>
    
    <button 
      type="button"
      [ngClass]="buttonClass()"
      [disabled]="isConnecting()"
      (click)="onWalletToggle()"
      [attr.aria-label]="isConnected() ? 'Disconnect wallet' : 'Connect wallet'">
      {{ buttonText() }}
    </button>
  </nav>
</header>
```

**File:** `src/app/components/header/header.component.scss`
**Action:** Replace entire content:

```scss
.header {
  padding: 1rem 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  backdrop-filter: blur(20px);
  background: var(--glass-bg);
  border-bottom: 1px solid var(--glass-border);
  position: sticky;
  top: 0;
  z-index: 100;

  @media (max-width: 768px) {
    padding: 1rem;
    flex-direction: column;
    gap: 1rem;
  }
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  user-select: none;
}

.logo-text {
  font-size: 1.8rem;
  font-weight: 800;
  background: linear-gradient(45deg, #FFD700, #FFA500);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  letter-spacing: -0.02em;
}

.logo-badge {
  font-size: 0.7rem;
  font-weight: 600;
  padding: 0.2rem 0.4rem;
  background: linear-gradient(45deg, #ff6b6b, #ee5a24);
  border-radius: 6px;
  color: white;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.nav {
  display: flex;
  gap: 1rem;
  align-items: center;

  @media (max-width: 768px) {
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }
}

.nav-link {
  background: none;
  border: none;
  color: var(--text-primary);
  text-decoration: none;
  padding: 0.7rem 1.2rem;
  border-radius: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--glass-bg);
    opacity: 0;
    transition: var(--transition);
  }

  &:hover:not(:disabled) {
    transform: translateY(-2px);
    
    &::before {
      opacity: 1;
    }
  }

  &:focus-visible {
    outline: 2px solid #ffd700;
    outline-offset: 2px;
  }

  @media (max-width: 768px) {
    padding: 0.5rem 0.8rem;
    font-size: 0.9rem;
  }
}

.connect-wallet {
  background: linear-gradient(45deg, #ff6b6b, #ee5a24);
  padding: 0.8rem 1.5rem;
  border: none;
  border-radius: 16px;
  color: white;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  box-shadow: 0 4px 15px rgba(238, 90, 36, 0.3);
  position: relative;
  overflow: hidden;
  min-width: 140px;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, #ff5252, #d32f2f);
    opacity: 0;
    transition: var(--transition);
  }

  &:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(238, 90, 36, 0.4);

    &::before {
      opacity: 1;
    }
  }

  &:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  &.connected {
    background: linear-gradient(45deg, #10b981, #059669);
    box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);

    &::before {
      background: linear-gradient(45deg, #0d9488, #047857);
    }

    &:hover:not(:disabled) {
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }
  }

  &.connecting {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      top: 50%;
      right: 1rem;
      width: 16px;
      height: 16px;
      margin-top: -8px;
      border: 2px solid transparent;
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
  }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

// Dark theme support
@media (prefers-color-scheme: dark) {
  .header {
    border-bottom-color: rgba(255, 255, 255, 0.1);
  }
}
```

---

## ðŸŒŸ **Component 2: Modern Hero with Animations**

**File:** `src/app/components/hero/hero.component.ts`
**Action:** Replace entire content:

```typescript
import { Component, signal, computed, effect } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-hero',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './hero.component.html',
  styleUrls: ['./hero.component.scss']
})
export class HeroComponent {
  private readonly currentWordIndex = signal(0);
  
  private readonly words = [
    'Trade', 'Swap', 'Earn', 'Build', 'Farm', 'Stake'
  ] as const;

  readonly currentWord = computed(() => 
    this.words[this.currentWordIndex()]
  );

  private wordRotationEffect = effect(() => {
    const timer = setInterval(() => {
      this.currentWordIndex.update(index => 
        (index + 1) % this.words.length
      );
    }, 2000);

    return () => clearInterval(timer);
  });

  onScrollToSwap(): void {
    const swapElement = document.getElementById('swap');
    swapElement?.scrollIntoView({ 
      behavior: 'smooth',
      block: 'start'
    });
  }
}
```

**File:** `src/app/components/hero/hero.component.html`
**Action:** Replace entire content:

```html
<section class="hero" role="banner">
  <div class="hero-content">
    <h1 class="hero-title">
      <span class="title-main">{{ currentWord() }}</span>
      <span class="title-rest">on the Next Evolution</span>
      <span class="title-highlight">DeFi Exchange</span>
    </h1>
    
    <p class="hero-description">
      Trade, earn, and build on the leading decentralized crypto trading protocol 
      on <strong>Binance Smart Chain</strong> with lightning-fast speeds and minimal fees.
    </p>
    
    <div class="hero-actions">
      <button 
        type="button"
        class="cta-button primary"
        (click)="onScrollToSwap()"
        aria-label="Start trading">
        <span>Start Trading</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M7 14l5-5 5 5z"/>
        </svg>
      </button>
      
      <button 
        type="button"
        class="cta-button secondary"
        aria-label="Learn more about IndoSwap">
        <span>Learn More</span>
      </button>
    </div>
  </div>
  
  <div class="hero-visual" aria-hidden="true">
    <div class="floating-cards">
      <div class="card card-1">
        <div class="card-icon">âš¡</div>
        <div class="card-text">Fast</div>
      </div>
      <div class="card card-2">
        <div class="card-icon">ðŸ”’</div>
        <div class="card-text">Secure</div>
      </div>
      <div class="card card-3">
        <div class="card-icon">ðŸ’°</div>
        <div class="card-text">Profitable</div>
      </div>
    </div>
  </div>
</section>
```

**File:** `src/app/components/hero/hero.component.scss`
**Action:** Replace entire content:

```scss
.hero {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
  padding: 6rem 0;
  min-height: 80vh;

  @media (max-width: 968px) {
    grid-template-columns: 1fr;
    gap: 3rem;
    padding: 4rem 0;
    text-align: center;
  }

  @media (max-width: 768px) {
    padding: 2rem 0;
  }
}

.hero-content {
  z-index: 2;
}

.hero-title {
  font-size: clamp(2.5rem, 5vw, 4rem);
  font-weight: 800;
  line-height: 1.1;
  margin-bottom: 2rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.title-main {
  background: linear-gradient(45deg, #FFD700, #FFA500, #FF6B6B);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  animation: glow 2s ease-in-out infinite alternate;
  display: inline-block;
  min-height: 1.2em;
  transition: var(--transition);
}

.title-rest {
  color: var(--text-primary);
  font-weight: 600;
}

.title-highlight {
  background: linear-gradient(45deg, #667eea, #764ba2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
}

.hero-description {
  font-size: 1.25rem;
  line-height: 1.6;
  color: var(--text-secondary);
  margin-bottom: 3rem;
  max-width: 600px;

  strong {
    color: #FFD700;
    font-weight: 600;
  }

  @media (max-width: 768px) {
    font-size: 1.1rem;
    margin-bottom: 2rem;
  }
}

.hero-actions {
  display: flex;
  gap: 1.5rem;
  align-items: center;

  @media (max-width: 768px) {
    flex-direction: column;
    gap: 1rem;
  }
}

.cta-button {
  padding: 1rem 2rem;
  border-radius: 16px;
  font-weight: 600;
  font-size: 1.1rem;
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  border: none;
  min-width: 160px;
  justify-content: center;

  &.primary {
    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
    color: white;
    box-shadow: 0 8px 25px rgba(238, 90, 36, 0.3);

    &:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 35px rgba(238, 90, 36, 0.4);
    }

    svg {
      transform: rotate(-90deg);
      transition: var(--transition);
    }

    &:hover svg {
      transform: rotate(-90deg) translateY(-2px);
    }
  }

  &.secondary {
    background: transparent;
    color: var(--text-primary);
    border: 2px solid var(--glass-border);
    backdrop-filter: blur(10px);

    &:hover {
      background: var(--glass-bg);
      border-color: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }
  }

  @media (max-width: 768px) {
    width: 100%;
    max-width: 300px;
  }
}

.hero-visual {
  position: relative;
  height: 400px;
  display: flex;
  align-items: center;
  justify-content: center;

  @media (max-width: 968px) {
    height: 300px;
  }
}

.floating-cards {
  position: relative;
  width: 100%;
  height: 100%;
}

.card {
  position: absolute;
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  border: 1px solid var(--glass-border);
  border-radius: 20px;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  animation: float 6s ease-in-out infinite;
  transition: var(--transition);

  &:hover {
    transform: translateY(-10px) scale(1.05);
    background: rgba(255, 255, 255, 0.15);
  }
}

.card-icon {
  font-size: 2rem;
  filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.5));
}

.card-text {
  font-weight: 600;
  color: var(--text-primary);
  font-size: 0.9rem;
}

.card-1 {
  top: 10%;
  left: 10%;
  animation-delay: -2s;
}

.card-2 {
  top: 50%;
  right: 10%;
  animation-delay: -4s;
}

.card-3 {
  bottom: 10%;
  left: 50%;
  transform: translateX(-50%);
  animation-delay: -1s;
}

@keyframes glow {
  from { 
    filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.3));
    transform: scale(1);
  }
  to { 
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.6));
    transform: scale(1.02);
  }
}

@keyframes float {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg); 
  }
  33% { 
    transform: translateY(-20px) rotate(2deg); 
  }
  66% { 
    transform: translateY(-10px) rotate(-2deg); 
  }
}

// Accessibility improvements
@media (prefers-reduced-motion: reduce) {
  .title-main,
  .card,
  .cta-button {
    animation: none;
  }
  
  .cta-button:hover {
    transform: none;
  }
}
```

---

## ðŸ“Š **Component 3: Modern Stats with Real-time Updates**

**File:** `src/app/components/stats/stats.component.ts`
**Action:** Replace entire content:

```typescript
import { Component, signal, computed, effect } from '@angular/core';
import { CommonModule } from '@angular/common';

interface StatItem {
  readonly label: string;
  readonly value: number;
  readonly prefix?: string;
  readonly suffix?: string;
  readonly formatter?: (value: number) => string;
}

@Component({
  selector: 'app-stats',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './stats.component.html',
  styleUrls: ['./stats.component.scss']
})
export class StatsComponent {
  private readonly baseStats: readonly StatItem[] = [
    { 
      label: 'Total Volume', 
      value: 2400000000, 
      prefix: '$',
      formatter: (value) => this.formatLargeNumber(value)
    },
    { 
      label: 'Active Users', 
      value: 156000,
      formatter: (value) => this.formatLargeNumber(value)
    },
    { 
      label: 'Total Liquidity', 
      value: 45000000, 
      prefix: '$',
      formatter: (value) => this.formatLargeNumber(value)
    },
    { 
      label: 'Total Trades', 
      value: 2300000,
      formatter: (value) => this.formatLargeNumber(value)
    }
  ] as const;

  private readonly animationProgress = signal(0);
  
  readonly currentStats = computed(() => 
    this.baseStats.map(stat => ({
      ...stat,
      displayValue: this.calculateAnimatedValue(stat.value)
    }))
  );

  private animationEffect = effect(() => {
    let startTime: number;
    const duration = 2000; // 2 seconds

    const animate = (currentTime: number) => {
      if (!startTime) startTime = currentTime;
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Easing function for smooth animation
      const easeOut = 1 - Math.pow(1 - progress, 3);
      this.animationProgress.set(easeOut);

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  });

  private calculateAnimatedValue(targetValue: number): string {
    const progress = this.animationProgress();
    const currentValue = Math.floor(targetValue * progress);
    return this.formatLargeNumber(currentValue);
  }

  private formatLargeNumber(value: number): string {
    if (value >= 1e9) {
      return (value / 1e9).toFixed(1) + 'B';
    }
    if (value >= 1e6) {
      return (value / 1e6).toFixed(1) + 'M';
    }
    if (value >= 1e3) {
      return (value / 1e3).toFixed(0) + 'K';
    }
    return value.toString();
  }
}
```

**File:** `src/app/components/stats/stats.component.html`
**Action:** Replace entire content:

```html
<section class="stats" role="region" aria-label="Platform statistics">
  <div 
    class="stat-card" 
    *ngFor="let stat of currentStats(); trackBy: trackByStat"
    [attr.aria-label]="stat.label + ': ' + (stat.prefix || '') + stat.displayValue + (stat.suffix || '')">
    
    <div class="stat-number" [attr.aria-hidden]="true">
      <span class="stat-prefix" *ngIf="stat.prefix">{{ stat.prefix }}</span>
      <span class="stat-value">{{ stat.displayValue }}</span>
      <span class="stat-suffix" *ngIf="stat.suffix">{{ stat.suffix }}</span>
    </div>
    
    <div class="stat-label">{{ stat.label }}</div>
    
    <div class="stat-indicator" aria-hidden="true">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
        <path d="M7 14l5-5 5 5z" fill="#10b981"/>
      </svg>
      <span class="trend-text">+12.5%</span>
    </div>
  </div>
</section>
```

**File:** `src/app/components/stats/stats.component.scss`
**Action:** Replace entire content:

```scss
.stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  margin: 4rem 0;

  @media (max-width: 768px) {
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin: 2rem 0;
  }

  @media (max-width: 480px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
}

.stat-card {
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  padding: 2rem 1.5rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--glass-border);
  text-align: center;
  transition: var(--transition);
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #FFD700, #FFA500, #FF6B6B);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.5s ease;
  }

  &:hover {
    transform: translateY(-8px);
    background: rgba(255, 255, 255, 0.15);
    box-shadow: var(--shadow-primary);

    &::before {
      transform: scaleX(1);
    }

    .stat-number {
      transform: scale(1.05);
    }
  }

  @media (max-width: 768px) {
    padding: 1.5rem 1rem;
  }
}

.stat-number {
  font-size: clamp(2rem, 4vw, 3rem);
  font-weight: 800;
  margin-bottom: 0.5rem;
  transition: var(--transition);
  display: flex;
  align-items: baseline;
  justify-content: center;
  gap: 0.1em;
}

.stat-prefix,
.stat-suffix {
  font-size: 0.7em;
  color: #FFD700;
  font-weight: 600;
}

.stat-value {
  color: var(--text-primary);
  background: linear-gradient(45deg, #FFD700, #FFA500);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.stat-label {
  color: var(--text-secondary);
  font-size: 1rem;
  font-weight: 500;
  margin-bottom: 0.75rem;
  letter-spacing: 0.02em;
}

.stat-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  font-size: 0.85rem;
  color: #10b981;
  font-weight: 600;

  svg {
    animation: bounce 2s infinite;
  }
}

.trend-text {
  font-family: 'Courier New', monospace;
  letter-spacing: 0.05em;
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-3px);
  }
}

// Loading state
.stat-card[aria-busy="true"] {
  .stat-value {
    background: linear-gradient(90deg, #333, #555, #333);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

// High contrast mode
@media (prefers-contrast: high) {
  .stat-card {
    border: 2px solid rgba(255, 255, 255, 0.5);
    
    &:hover {
      border-color: #FFD700;
    }
  }
}

// Reduced motion
@media (prefers-reduced-motion: reduce) {
  .stat-card,
  .stat-number,
  .stat-indicator svg {
    animation: none;
    transition: none;
  }
  
  .stat-card:hover {
    transform: none;
  }
}
```

---

## âœ‹ **Test Point - Run the App**

Before continuing with the remaining components, test what we have:

```bash
ng serve
```

You should now see:
- âœ… Modern header with wallet connection
- âœ… Animated hero section with rotating words
- âœ… Statistics with smooth animations

**Working so far?** Reply "Continue Part 2" and I'll give you the remaining components (Swap, Features, Footer, Notification)!